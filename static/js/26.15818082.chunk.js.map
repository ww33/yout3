{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["SimpleListDnD","props","count","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","state","source","index","setState","length","v","k","map","id","content","this","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","borderRadius","background","padding","width","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","boxShadow","placeholder","Component","SimpleHorizontalList","bind","direction","display","overflow","getItems","offset","move","droppableSource","droppableDestination","sourceClone","destClone","getItemStyle","getListStyle","TwoListDnD","selected","id2List","droppable","droppable2","getList","className","AppDragAndDrop","routeSegments","name","path","title"],"mappings":"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","file":"static/js/26.15818082.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  boxShadow: \"var(--elevation-z4)\",\n  borderRadius: \"4px\",\n  // change background colour if dragging\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: \"4px\",\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",\n  padding: grid,\n  width: 250\n});\n\nclass SimpleListDnD extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleListDnD;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n  boxShadow: \"var(--elevation-z4)\",\n  borderRadius: \"4px\",\n  // change background colour if dragging\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: \"4px\",\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleHorizontalList;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  boxShadow: \"var(--elevation-z4)\",\n  borderRadius: \"4px\",\n  // change background colour if dragging\n  background: isDragging ? \"var(--primary)\" : \"var(--bg-paper)\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  borderRadius: \"4px\",\n  background: isDraggingOver ? \"rgba(0,0,0, .1)\" : \"var(--bg-default)\",  padding: grid,\n  width: 250\n});\n\nclass TwoListDnD extends Component {\n  state = {\n    items: getItems(10),\n    selected: getItems(5, 10)\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    droppable: \"items\",\n    droppable2: \"selected\"\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"droppable2\") {\n        state = { selected: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"flex justify-around\">\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable droppableId=\"droppable2\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default TwoListDnD;\n","import React from \"react\";\nimport SimpleListDnD from \"./SimpleListDnD\";\nimport { Breadcrumb, SimpleCard } from \"matx\";\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\nimport TwoListDnD from \"./TwoListDnD\";\n\nconst AppDragAndDrop = () => {\n  return (\n    <div className=\"m-sm-30\">\n      <div className=\"mb-sm-30\">\n        <Breadcrumb\n          routeSegments={[\n            { name: \"others\", path: \"/drag-and-drop\" },\n            { name: \"Drag and Drop\" }\n          ]}\n        />\n      </div>\n      <SimpleCard title=\"Simple List Drag and Drop\">\n        <SimpleListDnD />\n      </SimpleCard>\n      <div className=\"py-3\" />\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n        <SimpleHorizontalList />\n      </SimpleCard>\n      <div className=\"py-3\" />\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\n        <TwoListDnD />\n      </SimpleCard>\n    </div>\n  );\n};\n\nexport default AppDragAndDrop;\n"],"sourceRoot":""}